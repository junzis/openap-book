# ðŸ¦¸ Trajectory Optimizer


Previously, the majority of flight optimizers mentioned in the literature remained closed-source, which posed a significant drawback in terms of reproducible research.

**The trajectory optimizer (TOP)** addresses this lack of open-source flight trajectory optimizer by providing everyone with open access to trajectory optimization based on a non-linear optimal control direct collocation approach. 

The `TOP` library can consider 3D or 4D wind fields. It can be utilized in various flight phases, either individually or in combination. It provides traditional fuel and cost index objectives alongside climate metrics-based objectives that incorporate global warming or temperature potential. 

Furthermore, I have designed a mechanism to include a complex 4D cost grid in trajectory optimization. This new mechanism allows easy generation of, for example, contrail-optimal trajectories.

## Paper

The optimization framework was first published in my following paper:
[@sun2022top](https://doi.org/10.3390/aerospace9070383)

Note that there have been quite many improvements and changes to the software code since the paper was published.

## Install

The `opeanp.top` library is designed to be a module inside the `openap` scope. You can install the most recent release thorugh pip:

```sh
pip install --upgrade openap-top
```

This will install `openap.top` and related dependencies. 

Alternatively, if you want to install the most recent development version:

```sh
pip install --upgrade git+https://github.com/junzis/openap-top
```


## Quick start

Example code to generate a fuel-optimal flight between two airports. First, we need to set up a few parameters, including `origin`, `destination`, `actype`, and `m0` (initial mass).

The initial mass `m0` can be the fraction of the maximum take-off mass (between 0 and 1), or it can be the mass in `kg` (for example, `65000` kg).

```{python}
from openap import top

actype = "A320"
origin = "EHAM"
destination = "LGAV"

# initial mass, can be 64_000 (kg)
m0 = 66_000

# or the faction of MTOW
m0 = 0.85 

```


In this simple example, we will generate a complete flight using `top.CompleteFlight()`. We will generate a fuel-optimal flight by setting `objective` to `"fuel"` in the trajectory generation function.

```{python}
optimizer = top.CompleteFlight(actype, origin, destination, m0=m0)

flight = optimizer.trajectory(objective="fuel")
flight.head()
```

In the previous table, we have the final fuel-optimal trajectory. Next, we can visualize the altitude, speed, and vertical rate.

```{python}
import matplotlib
import matplotlib.pyplot as plt

# set up the plot styles
matplotlib.rc("font", size=11)
matplotlib.rc("font", family="Ubuntu")
matplotlib.rc("lines", linewidth=2, markersize=8)
matplotlib.rc("grid", color="darkgray", linestyle=":")


# function to make plot nicer
def format_ax(ax):
    ax.spines["right"].set_visible(False)
    ax.spines["top"].set_visible(False)
    ax.yaxis.set_label_coords(-0.1, 1.05)
    ax.yaxis.label.set_rotation(0)
    ax.yaxis.label.set_ha("left")
    ax.grid()


fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(5, 4), sharex=True)
ax1.plot(flight.ts, flight.altitude)
ax2.plot(flight.ts, flight.tas)
ax3.plot(flight.ts, flight.vertical_rate)
ax1.set_ylim(0, 40000)
ax2.set_ylim(0, 600)
ax3.set_ylim(-3000, 3000)
ax1.set_ylabel("altitude (ft)")
ax2.set_ylabel("true airspeed (kts)")
ax3.set_ylabel("vertical rate (ft/min)")
ax3.set_xlabel("time(s)")

for ax in (ax1, ax2, ax3):
    format_ax(ax)

plt.tight_layout()
plt.show()
```

## Other objective functions

Instead of the default objective functions, you can also specify different objective functions as follows:

```python
# cost index, between 0 - 100
flight = optimizer.trajectory(objective="ci:30")

# global warming potential
flight = optimizer.trajectory(objective="gwp100")

# global temperature potential
flight = optimizer.trajectory(objective="gtp100")
```

The final `flight` object is a pandas DataFrame.


## Different flight phases

Instead of generating a complete flight, we can also generate cruise, climb, and descent flights using `top.Crusie`, `top.Climb`, and `top.Descent` classes.

```{python}
cruise_flight = top.Cruise(actype, origin, destination, m0=m0).trajectory()

climb_flight = top.Climb(actype, origin, destination, m0=m0).trajectory()

descent_flight = top.Descent(actype, origin, destination, m0=m0).trajectory()
```

Let's visulize these trajectories:

```{python}

labels = ("cruise flight", "climb flight", "descent flight")

fig, axes = plt.subplots(3, 3, figsize=(10, 4))

for i, flight in enumerate([cruise_flight, climb_flight, descent_flight]):
    ax1, ax2, ax3 = axes[:, i]
    ax1.plot(flight.ts, flight.altitude)
    ax2.plot(flight.ts, flight.tas)
    ax3.plot(flight.ts, flight.vertical_rate)
    ax1.set_ylabel("altitude (ft)")
    ax2.set_ylabel("true airspeed (kts)")
    ax3.set_ylabel("vertical rate (ft/min)")
    ax1.set_ylim(0, 40000)
    ax2.set_ylim(0, 600)
    ax3.set_ylim(-3000, 3000)
    ax1.set_title(labels[i], pad=20)
    ax3.set_xlabel("time(s)")

for ax in axes.flatten():
    format_ax(ax)

plt.tight_layout()
plt.show()
```



## Optimziation with wind data

It is also possible to include 3D or 4D wind data in the optimization. The code provides an example of such a use case. Note that the wind data is obtained using `fastmeteo` library in this example.

```{python}
import fastmeteo
import numpy as np
import pandas as pd
import openap

import warnings

warnings.filterwarnings("ignore")
```


Next, we need to get an example wind field data using the `fastmeteo` library. Note the selected ERA5 data will be cached temporarily at `/tmp/era5-zarr`.

```{python}
# get the boundary of the wind field
o = openap.nav.airport(origin)
d = openap.nav.airport(destination)

latmin = min(o["lat"], d["lat"]) - 2
latmax = max(o["lat"], d["lat"]) + 2
lonmin = min(o["lon"], d["lon"]) - 2
lonmax = max(o["lon"], d["lon"]) + 2

# create the and flatten the wind grid
latitudes = np.linspace(latmin, latmax, 20)
longitudes = np.linspace(lonmin, lonmax, 20)
altitudes = np.linspace(1000, 45000, 30)
timestamps = pd.date_range("2021-05-01 08:00:00", "2021-05-01 15:00:00", freq="1H")

latitudes, longitudes, altitudes, times = np.meshgrid(
    latitudes, longitudes, altitudes, timestamps
)

grid = pd.DataFrame().assign(
    latitude=latitudes.flatten(),
    longitude=longitudes.flatten(),
    altitude=altitudes.flatten(),
    timestamp=times.flatten(),
)

# obtain the wind based on the grid
fmg = fastmeteo.Grid(local_store="/tmp/era5-zarr")

meteo_data = fmg.interpolate(grid)
```

Let's take a look at the meteorological data we got:

```{python}
meteo_data.head()
```

Before passing this wind field to the optimizer, we need to format it correctly. The wind data needs to be in `pandas.DataFrame` with the following columns:
- `ts`: timestamp in seconds, with `0` representing the time of departure of the flight
- `latitude`: latitude of all the grid points
- `longitude`: longitude of all the grid points
- `h`: height of the grid points, in meters
- `u`: u component of the wind for each grid point, in m/s
- `v`: v component of the wind for each grid point, in m/s


```{python}
wind = (
    meteo_data.rename(
        columns={
            "u_component_of_wind": "u",
            "v_component_of_wind": "v",
        }
    )
    .assign(ts=lambda x: (x.timestamp - x.timestamp.iloc[0]).dt.total_seconds())
    .eval("h=altitude * 0.3048")
)[["ts", "latitude", "longitude", "h", "u", "v"]]

wind.head()
```

Last, we can run the optimization with the wind field and visulize the result:

```{python}
import matplotlib.pyplot as plt

optimizer = top.CompleteFlight(actype, origin, destination, m0)
optimizer.enable_wind(wind)
flight = optimizer.trajectory(objective="fuel")

top.vis.trajectory(flight)
plt.show()
```
