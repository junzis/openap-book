{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# ðŸª¤ Add-ons\n",
        "\n",
        "## BADA 4 \n",
        "\n",
        "The OpenAP library can also be used to interact with BADA performance models. \n",
        "\n",
        ":::{.callout-important}\n",
        "In order to user this, you must first obtain a lincense and BADA4 data from EUROCONTROL.\n",
        ":::\n",
        "\n",
        "The code for calculating drag, thrust, and fuel models from BADA4 are implemented in OpenAP. The interface is similar to the one used for the open-source OpenAP models. \n",
        "\n",
        "To use the BADA4 models, you first need to import the module from addons, and then specify the path to the BADA4 tables on your local system.\n",
        "\n",
        "```python\n",
        "from openap.addon import bada4\n",
        "\n",
        "bada_path = \"path/to/bada_4.x/tables\"\n",
        "```\n",
        "\n",
        "### Drag\n",
        "In the following example, we show how to use the BADA4 models to calculate the drag of an aircraft at a specific flight condition with clean configuration.\n",
        "\n",
        "```python\n",
        "drag = bada4.Drag(\"A320\", bada_path)\n",
        "\n",
        "drag.clean(mass=60000, tas=300, alt=12_000)  # kg, kt, ft -> N\n",
        "```\n",
        "\n",
        "Note that the aircraft type can be ICAO typecode like `A320` or with subtypes like `A320-231`.\n",
        "\n",
        "### Thrust\n",
        "\n",
        "To calculate the _maximum_ thrust at climb conditions, you can use the following code:\n",
        "\n",
        "```python\n",
        "thrust = bada4.Thrust(\"A320\", bada_path)\n",
        "\n",
        "thrust.climb(tas=250, alt=10_000)  # kg, kt, ft -> N\n",
        "```\n",
        "\n",
        "For max thrust at cruise conditions:\n",
        "\n",
        "```python\n",
        "thrust.cruise(tas=350, alt=30_000)\n",
        "```\n",
        "\n",
        "For idle thrust:\n",
        "\n",
        "```python\n",
        "thrust.idle(tas=250, alt=15_000)\n",
        "```\n",
        "\n",
        "### Fuel\n",
        "\n",
        "The fuel model interface is also similar to OpenAP's own fuel flow model interfaces. An example:\n",
        "\n",
        "```python\n",
        "fuel_bada = bada4.FuelFlow(\"A320\", bada_path)\n",
        "\n",
        "fuel_bada.enroute(mass=60000, tas=350, alt=35_000)  # kg, kt, ft -> kg/s\n",
        "```\n",
        "\n",
        "### Vectorized calculations\n",
        "\n",
        ":::{.callout-tip}\n",
        "The input parameters can be provided as list or numpy arrays. All the calcualtions are verctorized and hence extremly fast.\n",
        ":::\n",
        "\n",
        "In the following example, we show how to calculate the fuel flow from a flight data file obtained from opensky state vectors.\n",
        "\n",
        "\n",
        "```python\n",
        "import pandas as pd\n",
        "import openap\n",
        "from openap.addon import bada4\n",
        "\n",
        "typecode = \"A319\"\n",
        "fuel_bada = bada4.FuelFlow(typecode, bada_path)\n",
        "\n",
        "df = pd.read_csv(\"path/to/your/fightdata.csv\")\n",
        "dt = df.timestamp.diff().bfill().dt.total_seconds()  # time step in seconds\n",
        "\n",
        "# assume 85% of MTOW as initial mass\n",
        "mass0 = openap.prop.aircraft(typecode)[\"mtow\"] * 0.85\n",
        "\n",
        "# first pass to get an initial guess with reference mass\n",
        "fuel_flow_initial_guess = fuel_bada.enroute(\n",
        "    mass=mass0,\n",
        "    tas=df.groundspeed,\n",
        "    alt=df.altitude,\n",
        "    vs=df.vertical_rate,\n",
        ").flatten()\n",
        "\n",
        "# correct the mass at each time step\n",
        "mass = mass0 - (fuel_flow_initial_guess * dt).cumsum()\n",
        "\n",
        "# second pass with corrected mass\n",
        "fuel_flow = fuel_bada.enroute(\n",
        "    mass=mass, tas=df.groundspeed, alt=df.altitude, vs=df.vertical_rate\n",
        ").flatten()\n",
        "\n",
        "total_fuel = sum(fuel_flow * dt)\n",
        "```\n",
        "\n",
        "The cacluation takes approximately `4.6 ms Â± 33.7 Î¼s` for a dataframe with ~ 7,000 rows.\n"
      ],
      "id": "ded4b5b3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from traffic.core import Traffic, Flight\n",
        "df = Flight(df).resample(\"1s\").data\n",
        "\n",
        "dt = df.timestamp.diff().bfill().dt.total_seconds()"
      ],
      "id": "15f15b28",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "%%timeit\n",
        "# typecode = \"A319\"\n",
        "# assume 85% of MTOW as initial mass\n",
        "mass0 = openap.prop.aircraft(typecode)[\"mtow\"] * 0.85\n",
        "\n",
        "# first pass to get an initial guess with reference mass\n",
        "fuel_flow_initial_guess = fuel_bada.enroute(\n",
        "    mass=mass0,\n",
        "    tas=df.groundspeed,\n",
        "    alt=df.altitude,\n",
        "    vs=df.vertical_rate,\n",
        ").flatten()\n",
        "\n",
        "# correct the mass at each time step\n",
        "mass = mass0 - (fuel_flow_initial_guess * dt).cumsum()\n",
        "\n",
        "# second pass with corrected mass\n",
        "fuel_flow = fuel_bada.enroute(\n",
        "    mass=mass, tas=df.groundspeed, alt=df.altitude, vs=df.vertical_rate\n",
        ").flatten()\n",
        "\n",
        "total_fuel = sum(fuel_flow * dt)"
      ],
      "id": "4b46217a",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/junzi/env/openap/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}